	* 상속
		
		## 부모(슈퍼)클래스의 멤버(필드/메소드)를 자식(서브)클래스에 물려주는 것
		- 객체 지향 상속 : 자식이 부모 유전자(멤버)를 물려받는 것과 유사한 개념
		- 클래스간의 단일 상속만 가능 ☆☆
		- 자식클래스 멤버의 수는 반드시 부모클래스보다 크거나 같음 (부모클래스꺼 포함하기 때문)
		- 모든 생성자를 상속하지는 않음 (생성자와 초기화블록은 상속되지 않음. 멤버만 상속)
		- 상속 시 기본 생성자는 자식 생성자 첫 번째 줄에 자동으로 생성해줌
		- Object 클래스는 모든 클래스의 슈퍼 클래스
		- 자식클래스의 접근지정자는 반드시 부모클래스와 같거나 커야함
			└ 조상클래스가 변경되면 자손클래스는 자동적으로 영향을 받지만
			└ 자손클래스가 변경되면 조상클래스에 아무런 영향을 못 줌
		- final 클래스는 상속 불가능
		
		----------------------
		자식클래스 extends 부모클래스
		----------------------
			└ 자식클래스 → 부모클래스
		
	
	* 자바 상속의 특징
	
		- 자바는 클래스 단일 상속만 가능
		- C++는 다중 상속 가능 (다중 상속으로 멤버가 중복 생성되는 문제 발생)
		- 자바는 interface의 다중 상속 허용
		- 모든 자바 클래스는 묵시적으로 Object 클래스를 상속받음
			└ java.lang.Object
			└ class A extends Object {}
			
			
	* 오버라이드 (Override)
		
		## 메소드의 선언부가 같고 구현부를 다르게 프로그래밍하는 방식
		- 가장 나중의 메소드가 실행
		- 슈퍼클래스 메소드를 사용 -> super.메소드();
		- final 메소드는 오버라이드가 안 됨
		
		
	* 오버라이딩 (Overriding)
		
		## 조상 클래스로부터 상속받은 메소드의 내용을 변경하는 것
		- 상속받은 메소드를 그대로 사용하기도 하지만, 자손 클래스에 맞게 변경해야하는 경우가 많음
		- 부모 메소드를 구현하려면  자식 메소드안에 -> super.parentMethod();
		
		== 조건 ==
			- 구현부를 다르게 구현
			- 자손클래스에서 오버라이딩하는 메소드는 조상클래스의 메소드와
				└ ① 이름이 같아야 함
				└ ② 매개변수가 같아야 함
				└ ③ 반환타입이 같아야 함
				

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	