	
	* 절차 지향 언어와 객체 지향 언어
	
		- 절차 지향 언어 : 작업순서(알고리즘)을 표현 (함수들의 집합으로 프로그래밍) (ex: C언어)
		- 객체 지향 언어 : 미리 사용할 목적으로 설계도(클래스)를 완성하고 그 객체를 이용해서 프로그래밍 (ex: JAVA, C++)
		
	
	* 객체 지향 언어의 목적
	
		- 컴퓨터 산업 발전에 따라 소프트웨어의 생명 주기(life cycle) 단축
		- 상속, 다형성, 객체, 캡슐화 등 소프트웨어 재사용을 위한 여러 장치 내장
		- 소프트웨어 재사용과 부분 수정 빠름
		- 소프트웨어 생산성 향상
		
		
		1) 객체 모델링 -> DB 모델링 -> ERD
		2) 클래스를 설계 (Class Diagram)
		3) 프로그래밍
		
		
	1. 객체 (Object, Instance)
	
		- "세상 모든 것이 객체다."
		- 클래스를 통해 만들어진 현실 사물체
		- 현실 세계의 모든 것을 나타냄
		- 객체 멤버 : 속성(필드, 프로퍼티), 메소드(기능)
		- 인스턴스 : 클래스를 통해서 만들어진 것, 클래스의 인스턴스
		
		-- 인스턴스화(객체화)
		
			클래스타입 객체참조변수 = new 생성자();
			String str = new String("asdf");
			str.멤버; // 이렇게 접근
			
			(new : 객체 생성 연산자)
			(. : 객체 접근 연산자)
		
		
	2. 클래스 (Class)
	
		- 객체를 생성하기 위한 설계도(틀)
		- 사용자 정의 타입
		- 객체의 속성과 기능 선언

		- 클래스 구성
		
			접근제한자 class 클래스명 {
				접근제한자 필드명;
				접근제한자 메소드;
			}

			
		1) 필드
		
			- 멤버변수, 프로퍼티, 속성
			- 인스턴스 멤버 : 객체가 생성되면 생성되고 객체가 소멸되면 종료
				(인스턴스 멤버는 new 키워드를 통해 힙 영역에 존재)
			- 클래스 멤버 : 클래스가 생성되면 생성되고 클래스가 소멸되면 종료
				(클래스 멤버는 공유 가능)
				
				접근제한자 타입 필드명;
	
			
		2) 메소드 (함수, 기능)
		
				접근제한자 반환타입 메소드명 (입력인자) {
						return 반환값; // 반환값이 없으면 생략
				}
			
				public void instanceMethod(String name) {
						System.out.println(name + "인스턴스메소드2");
				}
				
			- 지역변수는 메소드 호출 시 생성되고 종료시 사라짐 (가비지 컬렉션)
			
			
	* 클래스 명명 규칙
	
		1. 대문자로 시작
		2. 한글을 사용하지 않음
		3. 특수기호는 _, $ 이외에 사용할 수 없음
		4. 공백을 허용하지 않음
		5. 카멜법 (권고)
		
		
	
	* 캡슐화
		- 객체를 캡슐로 싸서 내부를 볼 수 없게 하는 것
		- 객체의 가장 본질적인 특징
		- 외부의 접근으로부터 객체 보호
		
	* 자바의 캡슐화
		- 클래스 : 객체 모양을 선언한 틀 (캡슐화 할 틀)
		- 객체 : 생성된 실체 (인스턴스)
		- 클래스 내에 메소드와 필드 구현
		
	* 접근 제한자
		= 접근 지정자 = Modify
		- public : 모든 클래스에서 접근 가능 (공용)
		- private : 같은 클래스내에서만 접근 가능
		
	* 메소드 오버로딩 (Overloading)
		- 한 클래스내에서 두 개 이상의 이름이 같은 메소드 작성
		- 메소드 이름이 동일해야함
		- 매개 변수의 개수나 타입이 서로 달라야함
		- return 타입은 오버로딩과 관련 없음
		- 메소드의 이름이 같고 매개변수 유형이 다른 메소드를 허용
		- 생성자 오버로딩
		
	* 참조타입 (reference type)
		- 생성된 객체의 주소값을 대입
		- 객체.멤버 로 접근
		






























		